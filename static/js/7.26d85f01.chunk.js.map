{"version":3,"sources":["components/mainContentSections/MainContentSectionPromo/StyledPromo.tsx","components/mainContentSections/MainContentSectionPromo/MainContentSectionPromo.tsx","components/StyledFormItem.tsx","components/utils/Icon.tsx","components/StyledStandardForm.tsx","components/withFetchedData/unsuccessfulFetchPlaceholders.tsx","components/mainContentSections/FAQ/QuestionFaq.tsx","components/withFetchedData/withFetchedData.tsx","components/mainContentSections/FAQ/SubmitYourQuestion.tsx","components/mainContentSections/FAQ/FAQ.tsx"],"names":["RowOne","styled","div","RowTwo","PromoText","h2","StyledPromo","className","rowOne","rowTwo","bg","bgPosition","style","backgroundImage","backgroundPosition","getPromoBackground","name","resolution","getSingleImage","MainContentSectionPromo","sectionName","titleRowOne","titleRowTwo","backgrounds","useMemo","minDeviceWidth","maxDeviceWidth","hiddenLabelStyles","css","requiredLabelStyles","InputLabel","label","isHidden","isRequired","FormInput","StyledFormItem","inputAs","type","placeholder","useState","isLabelHidden","toggleLabel","handleFocusChange","useCallback","event","target","value","length","labelStatus","inputValue","changeValue","handleChange","formInputProps","required","onChange","onFocus","onBlur","inputRef","useRef","as","ref","onClick","current","focus","Icon","viewBox","propsColor","color","propsSize","size","children","propsAttr","useContext","IconContext","contextSize","contextColor","contextAttr","attr","stroke","fill","strokeWidth","height","width","xmlns","StandardFormInput","StandardFormSubjectInput","StandardFormQuestionsInput","StandardFormSubmit","StandardBtn","StyledStandardForm","action","method","handleSubmit","onSubmit","Wrapper","rotate","keyframes","LoadingIcon","LoadingPlaceholder","d","ErrorPlaceholder","text","Component","url","options","QuestionCard","QuestionCardTitle","QuestionCardText","p","AskBtn","QuestionFaqWrapper","StyledWrapper","QuestionFaqWithFetchedData","questions","data","StyledStandardSectionTitle","map","question","answer","id","process","props","status","result","state","setState","AbortController","signal","abort","useEffect","fetch","then","res","ok","json","Error","statusText","catch","error","message","setData","SubmitYourQuestionWrapper","SubmitYourQuestion","preventDefault","alert","FAQ"],"mappings":"4rCAGA,IAAMA,EAASC,IAAOC,IAAV,KAKNC,EAASF,IAAOC,IAAV,KAKNE,EAAYH,IAAOI,GAAV,IAoBTL,EAGAG,GA0BAG,EAAcL,aAZW,SAAC,GAAD,IAAGM,EAAH,EAAGA,UAAWC,EAAd,EAAcA,OAAQC,EAAtB,EAAsBA,OAAQC,EAA9B,EAA8BA,GAAIC,EAAlC,EAAkCA,WAAlC,OAC7B,qBACEJ,UAAWA,EACXK,MAAO,CAAEC,gBAAgB,OAAD,OAASH,EAAT,KAAgBI,mBAAoBH,GAF9D,SAIE,eAACP,EAAD,WACE,cAACJ,EAAD,UAASQ,IACT,cAACL,EAAD,UAASM,WAKKR,CAAH,K,QCxDXc,EAAqB,SAACC,EAAcC,GACxC,OAAOC,YAAe,2BAAD,OAA4BF,EAA5B,YAAoCC,GAAc,QAkBnEE,EAA2C,SAAC,GAK3C,IAJLC,EAII,EAJJA,YACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,YACAX,EACI,EADJA,WAEMY,EAA2BC,mBAC/B,iBAAO,CACL,UAAWT,EAAmBK,EAAa,WAC3C,WAAYL,EAAmBK,EAAa,YAC5C,WAAYL,EAAmBK,EAAa,YAC5C,WAAYL,EAAmBK,EAAa,YAC5C,YAAaL,EAAmBK,EAAa,gBAE/C,CAACA,IAGH,OACE,qCACE,cAAC,IAAD,CAAYK,eAAgB,OAA5B,SACE,cAACnB,EAAD,CACEE,OAAQa,EACRZ,OAAQa,EACRZ,GAAIa,EAAY,aAChBZ,WAAYA,MAGhB,cAAC,IAAD,CAAYc,eAAgB,OAAQC,eAAgB,KAApD,SACE,cAACpB,EAAD,CACEE,OAAQa,EACRZ,OAAQa,EACRZ,GAAIa,EAAY,YAChBZ,WAAYA,MAGhB,cAAC,IAAD,CAAYc,eAAgB,MAAOC,eAAgB,KAAnD,SACE,cAACpB,EAAD,CACEE,OAAQa,EACRZ,OAAQa,EACRZ,GAAIa,EAAY,YAChBZ,WAAYA,MAGhB,cAAC,IAAD,CAAYc,eAAgB,MAAOC,eAAgB,IAAnD,SACE,cAACpB,EAAD,CACEE,OAAQa,EACRZ,OAAQa,EACRZ,GAAIa,EAAY,YAChBZ,WAAYA,MAGhB,cAAC,IAAD,CAAYe,eAAgB,IAA5B,SACE,cAACpB,EAAD,CACEE,OAAQa,EACRZ,OAAQa,EACRZ,GAAIa,EAAY,WAChBZ,WAAYA,W,y9BC7EtB,IAAMgB,EAAoBC,YAAH,KAIjBC,EAAsBD,YAAH,KAanBE,EAAa7B,IAAO8B,MAAV,KAMZ,qBAAGC,SAA2BL,EAAoB,MAClD,qBAAGM,WAA+BJ,EAAsB,MAEtDK,EAAYjC,IAAOC,IAAV,KA6ETiC,EAAiBlC,aA1DW,SAAC,GAAiE,IAA/DM,EAA8D,EAA9DA,UAAW6B,EAAmD,EAAnDA,QAASC,EAA0C,EAA1CA,KAAMrB,EAAoC,EAApCA,KAAMsB,EAA8B,EAA9BA,YAAaL,EAAiB,EAAjBA,WAAiB,EAC5DM,oBAAS,GADmD,mBAC1FC,EAD0F,KAC3EC,EAD2E,KAG3FC,EAAoBC,uBAAY,SAACC,GACH,IAA9BA,EAAMC,OAAOC,MAAMC,QACrBN,GAAY,SAACO,GAAD,OAAkBA,OAE/B,IAP8F,EAS/DT,mBAAS,IATsD,mBAS1FU,EAT0F,KAS9EC,EAT8E,KAU3FC,EAAeR,uBACnB,SAACC,GAAD,OAA+CM,EAAYN,EAAMC,OAAOC,SACxE,IAGIM,EAAiB5B,mBACrB,iBAAO,CACLR,OACAqC,SAAUpB,EACVqB,SAAUH,EACVI,QAASb,EACTc,OAAQd,KAEV,CAAC1B,EAAMiB,EAAYkB,EAAcT,IAG7Be,EAAWC,mBAEjB,OACE,sBAAKnD,UAAWA,EAAhB,UACe,UAAZ6B,GACC,cAACF,EAAD,aACEyB,GAAIvB,EACJwB,IAAKH,EACLpB,KAAMA,EACNS,MAAOG,GACHG,IAGK,aAAZhB,GACC,cAACF,EAAD,aACEyB,GAAIvB,EACJwB,IAAKH,EACLX,MAAOG,GACHG,IAGR,cAACtB,EAAD,CACEE,SAAUQ,EACVP,WAAYA,EACZ4B,QAAS,kCAAMJ,EAASK,eAAf,aAAM,EAAkBC,SAHnC,SAKGzB,SAMcrC,CAAH,M,4GClGd+D,EAAwB,SAAC,GAOxB,IANLC,EAMI,EANJA,QACOC,EAKH,EALJC,MACMC,EAIF,EAJJC,KACAC,EAGI,EAHJA,SACA/D,EAEI,EAFJA,UACGgE,EACC,mEACyEC,qBAC3EC,KADYC,EADV,EACIL,KAA0BM,EAD9B,EACuBR,MAA2BS,EADlD,EAC4CC,KAAmBjE,EAD/D,EAC+DA,MAI7DyD,EAAO7C,mBAAQ,yCAAM4C,QAAN,IAAMA,IAAaM,SAAnB,QAAkC,QAAO,CAACN,EAAWM,IACpEP,EAAQ3C,mBAAQ,yCAAM0C,QAAN,IAAMA,IAAcS,SAApB,QAAoC,YAAW,CAACT,EAAYS,IAC5EE,EAAOrD,mBAAQ,8BAAC,eAAWoD,GAAgBL,KAAc,CAACA,EAAWK,IAE3E,OACE,6CACErE,UAAWA,EACXuE,OAAO,eACPC,KAAK,eACLC,YAAY,IACZf,QAASA,EACTgB,OAAQZ,EACRa,MAAOb,EACPF,MAAOA,EACPvD,MAAOA,EACPuE,MAAM,8BACFN,GAXN,aAaGP,O,06BCjCP,IAAMc,EAAoBnF,YAAOkC,IAAPlC,CAAH,KAKjBoF,EAA2BpF,YAAOkC,IAAPlC,CAAH,KAGxBqF,EAA6BrF,YAAOkC,IAAPlC,CAAH,KAK1BsF,EAAqBtF,YAAOuF,IAAPvF,CAAH,KAyClBwF,EAAqBxF,aArBW,SAAC,GAAD,IAAGe,EAAH,EAAGA,KAAM0E,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,OAAQpF,EAAzB,EAAyBA,UAAWqF,EAApC,EAAoCA,aAApC,OACpC,uBAAM5E,KAAMA,EAAM0E,OAAQA,EAAQC,OAAQA,EAAQE,SAAUD,EAAcrF,UAAWA,EAArF,UACE,cAAC6E,EAAD,CAAmBhD,QAAQ,QAAQC,KAAK,OAAOrB,KAAK,OAAOsB,YAAY,OAAOL,YAAU,IACxF,cAACmD,EAAD,CAAmBhD,QAAQ,QAAQC,KAAK,QAAQrB,KAAK,QAAQsB,YAAY,QAAQL,YAAU,IAC3F,cAACoD,EAAD,CACEjD,QAAQ,QACRC,KAAK,OACLrB,KAAK,UACLsB,YAAY,UACZL,YAAU,IAEZ,cAACqD,EAAD,CACElD,QAAQ,WACRpB,KAAK,YACLsB,YAAY,0BACZL,YAAU,IAEZ,cAACsD,EAAD,CAAoBlD,KAAK,SAAzB,yBAIuBpC,CAAH,M,srBCtDxB,IAAM6F,EAAU7F,IAAOC,IAAV,KAaP6F,EAASC,YAAH,KAQNC,EAAchG,YAAO+D,IAAP/D,CAAH,IACG8F,GAGdG,EAA+B,kBACnC,eAACJ,EAAD,WACE,cAACG,EAAD,CAAahC,QAAQ,cAAcI,KAAM,GAAIF,MAAM,sBAAnD,SACE,8BACE,sBACEgC,EAAE,4RAIJ,sBACEA,EAAE,uYATV,iBAoBIC,EAA+C,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACnD,eAACP,EAAD,WACE,cAAC,IAAD,CAAgBzB,KAAM,GAAIF,MAAM,wBADlC,UAEUkC,M,0/CC9CZ,ICOEC,EACAC,EACAC,EDTIC,EAAexG,IAAOC,IAAV,KAmBZwG,EAAoBzG,IAAOC,IAAV,KAMjByG,EAAmB1G,IAAO2G,EAAV,KAQhBC,EAAS5G,YAAOuF,IAAPvF,CAAH,KAUN6G,EAAqB7G,YAAO8G,IAAP9G,CAAH,IASlBwG,GAiCAO,GC9EJV,ED6DmC,SAAC,GAAD,IAASW,EAAT,EAAGC,KAAH,OACnC,kCACE,eAACJ,EAAD,WACE,cAACK,EAAA,EAAD,CAA4B3G,OAAO,WAAWC,OAAO,UADvD,OAEGwG,QAFH,IAEGA,OAFH,EAEGA,EAAWG,KAAI,gBAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,GAArB,OACd,cAACd,EAAD,UACE,gCACE,cAACC,EAAD,UAAoBW,IACpB,cAACV,EAAD,UAAmBW,QAHJC,MAOrB,cAACV,EAAD,qDCxEJN,ED6EgD,UAE7CiB,WAF6C,wBC1EzC,SAACC,GAAc,IAAD,EACOlF,mBAAkB,CAAEmF,OAAQ,UAAWC,OAAQ,OADtD,mBACZC,EADY,KACLC,EADK,OAEOrG,mBAAQ,kBAAM,IAAIsG,kBAAmB,IAAvDC,EAFW,EAEXA,OAAQC,EAFG,EAEHA,MAchB,OAZAC,qBAAU,WASR,OARAC,MAAM3B,EAAD,YAAC,eAAUC,GAAX,IAAoBuB,YACtBI,MAAK,SAACC,GACL,GAAIA,EAAIC,GAAI,OAAOD,EAAIE,OACvB,MAAM,IAAIC,MAAMH,EAAII,eAErBL,MAAK,SAACjB,GAAD,OAAaW,EAAS,CAAEH,OAAQ,UAAWC,OAAQT,OACxDuB,OAAM,SAACC,GAAD,OAAkBb,EAAS,CAAEH,OAAQ,UAAWC,OAAQe,OAE1DV,IACN,CAACD,EAAQC,IAES,YAAjBJ,EAAMF,OAA6B,cAAC,EAAD,IAElB,YAAjBE,EAAMF,OAA6B,cAAC,EAAD,CAAkBrB,KAAMuB,EAAMD,OAAOgB,UAG1E,cAACrC,EAAD,aACEY,KAAMU,EAAMD,OACZiB,QAAS,SAAC1B,GAAD,OAAaW,EAAS,CAAEH,OAAQ,UAAWC,OAAQT,MACxDO,M,iPCrCZ,IAAMoB,EAA4B5I,YAAO8G,IAAP9G,CAAH,KAWzB6I,EAA+B,WACnC,IAAMlD,EAAejD,uBAAY,SAACC,GAChCA,EAAMmG,iBAGNC,MAAM,qCACL,IAEH,OACE,kCACE,eAACH,EAAD,WACE,cAAC1B,EAAA,EAAD,CAA4B3G,OAAO,cAAcC,OAAO,aACxD,cAACgF,EAAA,EAAD,CACEzE,KAAK,uBACL0E,OAAO,GACPC,OAAO,OACPC,aAAcA,UCfTqD,UAbO,kBACpB,oCACE,cAAC9H,EAAA,EAAD,CACEC,YAAY,MACZC,YAAY,MACZC,YAAY,YACZX,WAAW,eAEb,cAACqG,EAAD,IACA,cAAC,EAAD","file":"static/js/7.26d85f01.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst RowOne = styled.div`\n  font-weight: 800;\n  font-size: 4rem;\n  letter-spacing: 0.025em;\n`;\nconst RowTwo = styled.div`\n  font-weight: 300;\n  font-size: 2rem;\n  letter-spacing: 0.1em;\n`;\nconst PromoText = styled.h2`\n  position: absolute;\n  top: 50%;\n  left: calc((100% - 1200px) / 2);\n  color: white;\n  white-space: nowrap;\n  text-transform: uppercase;\n  transform: translateY(-50%);\n\n  @media (max-width: 1250px) {\n    left: calc((100% - 1160px) / 2);\n  }\n  @media (max-width: 1200px) {\n    left: 20px;\n  }\n  @media (max-width: 1000px) {\n    left: 50%;\n    transform: translateX(-50%) translateY(-50%);\n  }\n  @media (max-width: 600px) {\n    ${RowOne} {\n      font-size: 3.5rem;\n    }\n    ${RowTwo} {\n      font-size: 1.5rem;\n    }\n  }\n`;\n\nexport interface Props {\n  rowOne: string;\n  rowTwo: string;\n  bg: string;\n  bgPosition: string;\n  className?: string;\n}\n\nconst Promo: React.FC<Props> = ({ className, rowOne, rowTwo, bg, bgPosition }) => (\n  <div\n    className={className}\n    style={{ backgroundImage: `url(${bg})`, backgroundPosition: bgPosition }}\n  >\n    <PromoText>\n      <RowOne>{rowOne}</RowOne>\n      <RowTwo>{rowTwo}</RowTwo>\n    </PromoText>\n  </div>\n);\n\nconst StyledPromo = styled(Promo)`\n  position: relative;\n  height: 260px;\n  background-repeat: no-repeat;\n`;\n\nexport { StyledPromo };\n","import React, { useMemo } from 'react';\nimport MediaQuery from 'react-responsive';\n\nimport { StyledPromo } from './StyledPromo';\nimport { getSingleImage } from '../../utils/img';\n\nconst getPromoBackground = (name: string, resolution: string) => {\n  return getSingleImage(`mainContentSectionPromo/${name}_${resolution}`, 'jpg');\n};\n\nexport interface Backgrounds {\n  '540x960': string;\n  '720x1280': string;\n  '1280x720': string;\n  '1600x900': string;\n  '2048x1152': string;\n}\n\nexport interface Props {\n  sectionName: string;\n  titleRowOne: string;\n  titleRowTwo: string;\n  bgPosition: string;\n}\n\nconst MainContentSectionPromo: React.FC<Props> = ({\n  sectionName,\n  titleRowOne,\n  titleRowTwo,\n  bgPosition,\n}) => {\n  const backgrounds: Backgrounds = useMemo(\n    () => ({\n      '540x960': getPromoBackground(sectionName, '540x960'),\n      '720x1280': getPromoBackground(sectionName, '720x1280'),\n      '1280x720': getPromoBackground(sectionName, '1280x720'),\n      '1600x900': getPromoBackground(sectionName, '1600x900'),\n      '2048x1152': getPromoBackground(sectionName, '2048x1152'),\n    }),\n    [sectionName]\n  );\n\n  return (\n    <>\n      <MediaQuery minDeviceWidth={1600.1}>\n        <StyledPromo\n          rowOne={titleRowOne}\n          rowTwo={titleRowTwo}\n          bg={backgrounds['2048x1152']}\n          bgPosition={bgPosition}\n        />\n      </MediaQuery>\n      <MediaQuery minDeviceWidth={1250.1} maxDeviceWidth={1600}>\n        <StyledPromo\n          rowOne={titleRowOne}\n          rowTwo={titleRowTwo}\n          bg={backgrounds['1600x900']}\n          bgPosition={bgPosition}\n        />\n      </MediaQuery>\n      <MediaQuery minDeviceWidth={700.1} maxDeviceWidth={1250}>\n        <StyledPromo\n          rowOne={titleRowOne}\n          rowTwo={titleRowTwo}\n          bg={backgrounds['1280x720']}\n          bgPosition={bgPosition}\n        />\n      </MediaQuery>\n      <MediaQuery minDeviceWidth={500.1} maxDeviceWidth={700}>\n        <StyledPromo\n          rowOne={titleRowOne}\n          rowTwo={titleRowTwo}\n          bg={backgrounds['720x1280']}\n          bgPosition={bgPosition}\n        />\n      </MediaQuery>\n      <MediaQuery maxDeviceWidth={500}>\n        <StyledPromo\n          rowOne={titleRowOne}\n          rowTwo={titleRowTwo}\n          bg={backgrounds['540x960']}\n          bgPosition={bgPosition}\n        />\n      </MediaQuery>\n    </>\n  );\n};\n\nexport { MainContentSectionPromo };\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useState, useCallback, useMemo, useRef, MutableRefObject } from 'react';\nimport styled, { css } from 'styled-components';\n\nconst hiddenLabelStyles = css`\n  visibility: hidden;\n  opacity: 0;\n`;\nconst requiredLabelStyles = css`\n  &:after {\n    color: var(--accent-color);\n    font-size: 1.6rem;\n    content: '*';\n  }\n`;\n\ninterface InputLabelProps {\n  isHidden?: boolean;\n  isRequired?: boolean;\n}\n\nconst InputLabel = styled.label<InputLabelProps>`\n  position: absolute;\n  top: 21px;\n  left: 20px;\n  cursor: text;\n  transition: 0.2s;\n  ${({ isHidden }) => (isHidden ? hiddenLabelStyles : '')}\n  ${({ isRequired }) => (isRequired ? requiredLabelStyles : '')}\n`;\nconst FormInput = styled.div`\n  width: 100%;\n  height: 100%;\n  padding: 20px;\n  border: solid 1px var(--border-color);\n  resize: none;\n`;\n\ntype InputOrTextarea = HTMLInputElement | HTMLTextAreaElement;\n\nexport interface Props {\n  inputAs: 'input' | 'textarea';\n  name: string;\n  placeholder: string;\n  isRequired?: boolean;\n  type?: string;\n  className?: string;\n}\n\nconst FormItem: React.FC<Props> = ({ className, inputAs, type, name, placeholder, isRequired }) => {\n  const [isLabelHidden, toggleLabel] = useState(false);\n\n  const handleFocusChange = useCallback((event: React.FocusEvent<InputOrTextarea>) => {\n    if (event.target.value.length === 0) {\n      toggleLabel((labelStatus) => !labelStatus);\n    }\n  }, []);\n\n  const [inputValue, changeValue] = useState('');\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<InputOrTextarea>) => changeValue(event.target.value),\n    []\n  );\n\n  const formInputProps = useMemo(\n    () => ({\n      name,\n      required: isRequired,\n      onChange: handleChange,\n      onFocus: handleFocusChange,\n      onBlur: handleFocusChange,\n    }),\n    [name, isRequired, handleChange, handleFocusChange]\n  );\n\n  const inputRef = useRef<InputOrTextarea>();\n\n  return (\n    <div className={className}>\n      {inputAs === 'input' && (\n        <FormInput\n          as={inputAs}\n          ref={inputRef as MutableRefObject<HTMLInputElement>}\n          type={type}\n          value={inputValue}\n          {...formInputProps}\n        />\n      )}\n      {inputAs === 'textarea' && (\n        <FormInput\n          as={inputAs}\n          ref={inputRef as MutableRefObject<HTMLTextAreaElement>}\n          value={inputValue}\n          {...formInputProps}\n        />\n      )}\n      <InputLabel\n        isHidden={isLabelHidden}\n        isRequired={isRequired}\n        onClick={() => inputRef.current?.focus()}\n      >\n        {placeholder}\n      </InputLabel>\n    </div>\n  );\n};\n\nconst StyledFormItem = styled(FormItem)`\n  position: relative;\n  color: var(--text-color);\n  font-size: 1.4rem;\n  letter-spacing: 0.01em;\n`;\n\nexport { StyledFormItem, FormInput, InputLabel };\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useContext, useMemo } from 'react';\nimport { IconContext } from 'react-icons';\n\nexport interface Props extends React.SVGAttributes<SVGElement> {\n  viewBox: string;\n  size?: number | string;\n}\n\nconst Icon: React.FC<Props> = ({\n  viewBox,\n  color: propsColor,\n  size: propsSize,\n  children,\n  className,\n  ...propsAttr\n}) => {\n  const { size: contextSize, color: contextColor, attr: contextAttr, style } = useContext(\n    IconContext\n  );\n\n  const size = useMemo(() => propsSize ?? contextSize ?? '1em', [propsSize, contextSize]);\n  const color = useMemo(() => propsColor ?? contextColor ?? 'inherit', [propsColor, contextColor]);\n  const attr = useMemo(() => ({ ...contextAttr, ...propsAttr }), [propsAttr, contextAttr]);\n\n  return (\n    <svg\n      className={className}\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      strokeWidth=\"0\"\n      viewBox={viewBox}\n      height={size}\n      width={size}\n      color={color}\n      style={style}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...attr}\n    >\n      {children}\n    </svg>\n  );\n};\n\nexport { Icon };\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { StandardBtn } from './StandardBtn';\nimport { StyledFormItem } from './StyledFormItem';\n\nconst StandardFormInput = styled(StyledFormItem)`\n  @media (max-width: 800px) {\n    grid-column: 1 / -1;\n  }\n`;\nconst StandardFormSubjectInput = styled(StyledFormItem)`\n  grid-column: 1 / -1;\n`;\nconst StandardFormQuestionsInput = styled(StyledFormItem)`\n  grid-row: span 3;\n  grid-column: 1 / -1;\n`;\n\nconst StandardFormSubmit = styled(StandardBtn)`\n  grid-column: 1 / -1;\n  width: 160px;\n  font-weight: 700;\n  font-size: 1.4rem;\n  letter-spacing: 0.1em;\n\n  @media (max-width: 800px) {\n    justify-self: center;\n  }\n`;\n\nexport interface Props {\n  name: string;\n  action: string;\n  method: string;\n  handleSubmit?: (event: React.FormEvent<HTMLFormElement>) => void;\n  className?: string;\n}\n\nconst StandardForm: React.FC<Props> = ({ name, action, method, className, handleSubmit }) => (\n  <form name={name} action={action} method={method} onSubmit={handleSubmit} className={className}>\n    <StandardFormInput inputAs=\"input\" type=\"text\" name=\"name\" placeholder=\"Name\" isRequired />\n    <StandardFormInput inputAs=\"input\" type=\"email\" name=\"email\" placeholder=\"Email\" isRequired />\n    <StandardFormSubjectInput\n      inputAs=\"input\"\n      type=\"text\"\n      name=\"subject\"\n      placeholder=\"Subject\"\n      isRequired\n    />\n    <StandardFormQuestionsInput\n      inputAs=\"textarea\"\n      name=\"questions\"\n      placeholder=\"Ask your questions here\"\n      isRequired\n    />\n    <StandardFormSubmit type=\"submit\">Submit</StandardFormSubmit>\n  </form>\n);\n\nconst StyledStandardForm = styled(StandardForm)`\n  display: grid;\n  grid-auto-rows: 60px;\n  grid-template-columns: repeat(2, 1fr);\n  width: 100%;\n  margin-top: 35px;\n  column-gap: 30px;\n  row-gap: 10px;\n`;\n\nexport { StyledStandardForm };\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { MdErrorOutline } from 'react-icons/md';\n\nimport { Icon } from '../utils/Icon';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  grid-column: 1 / -1;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  min-height: 300px;\n  color: black;\n  font-size: 2.5rem;\n  row-gap: 10px;\n`;\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(1turn);\n  }\n  to {\n    transform: rotate(0);\n  }\n`;\nconst LoadingIcon = styled(Icon)`\n  animation: 0.8s ${rotate} linear infinite;\n`;\n\nconst LoadingPlaceholder: React.FC = () => (\n  <Wrapper>\n    <LoadingIcon viewBox=\"0 0 508 508\" size={60} color=\"var(--accent-color)\">\n      <g>\n        <path\n          d=\"M114.928,174.046l-28.8,28.8C114.48,109.944,212.776,57.617,305.677,85.969c35.405,10.805,66.498,32.506,88.851,62.012\n            l25.488-19.312C350.79,37.151,220.481,19.078,128.962,88.304c-37.933,28.692-64.873,69.53-76.322,115.694l-30.016-29.952\n            L0,196.654l68.8,68.8l68.8-68.8L114.928,174.046z\"\n        />\n        <path\n          d=\"M439.68,242.702l-68.8,68.8l22.624,22.624l29.136-29.12c-28.103,93.051-126.317,145.702-219.368,117.599\n            c-37.011-11.178-69.311-34.231-91.912-65.599l-25.968,18.688c32.093,44.868,80.787,75.048,135.248,83.824\n            c11.162,1.812,22.452,2.727,33.76,2.736c95.518-0.045,178.669-65.284,201.44-158.048l29.952,29.92l22.688-22.624L439.68,242.702z\n            M438.88,288.798l0.816-0.816l1.184,1.2L438.88,288.798z\"\n        />\n      </g>\n    </LoadingIcon>\n    Loading...\n  </Wrapper>\n);\n\nconst ErrorPlaceholder: React.FC<{ text: string }> = ({ text }) => (\n  <Wrapper>\n    <MdErrorOutline size={60} color=\"var(--accent-color)\" />\n    Error: {text}\n  </Wrapper>\n);\n\nexport { LoadingPlaceholder, ErrorPlaceholder };\n","/* eslint-disable import/no-mutable-exports */\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport { StyledWrapper } from '../../StyledWrapper';\nimport { StyledStandardSectionTitle } from '../../StyledStandardSectionTitle';\nimport { StandardBtn } from '../../StandardBtn';\nimport { withFetchedData, WithFetchedDataProps } from '../../withFetchedData/withFetchedData';\n\nconst QuestionCard = styled.div`\n  display: flex;\n  align-items: start;\n  font-weight: 800;\n  font-size: 1.4rem;\n  column-gap: 30px;\n  &:before {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    min-width: 65px;\n    height: 65px;\n    color: white;\n    font-size: 3rem;\n    text-transform: uppercase;\n    background-color: var(--accent-color);\n    content: 'q';\n  }\n`;\nconst QuestionCardTitle = styled.div`\n  margin: 25px 0;\n  color: var(--text-color-primary);\n  letter-spacing: 0.05em;\n  text-transform: uppercase;\n`;\nconst QuestionCardText = styled.p`\n  max-width: 600px;\n  color: var(--text-color);\n  font-weight: 400;\n  line-height: 24px;\n  letter-spacing: 0.01em;\n`;\n\nconst AskBtn = styled(StandardBtn)`\n  grid-column: 1 / -1;\n  justify-self: center;\n  width: 100%;\n  max-width: 400px;\n  font-weight: 700;\n  font-size: 1.4rem;\n  letter-spacing: 0.1em;\n`;\n\nconst QuestionFaqWrapper = styled(StyledWrapper)`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 50px;\n  padding-top: 80px;\n  padding-bottom: 80px;\n  border-bottom: 1px solid var(--border-color);\n\n  @media (max-width: 1000px) {\n    ${QuestionCard} {\n      flex-direction: column;\n      align-items: center;\n      text-align: center;\n    }\n  }\n  @media (max-width: 800px) {\n    grid-template-columns: 1fr;\n    justify-items: center;\n  }\n`;\n\ntype Questions = { question: string; answer: string; id: string }[];\n\nexport type Props = WithFetchedDataProps<Questions>;\n\nconst QuestionFaq: React.FC<Props> = ({ data: questions }) => (\n  <section>\n    <QuestionFaqWrapper>\n      <StyledStandardSectionTitle rowOne=\"Question\" rowTwo=\"Faq's\" />\n      {questions?.map(({ question, answer, id }) => (\n        <QuestionCard key={id}>\n          <div>\n            <QuestionCardTitle>{question}</QuestionCardTitle>\n            <QuestionCardText>{answer}</QuestionCardText>\n          </div>\n        </QuestionCard>\n      ))}\n      <AskBtn>Ask your questions through email</AskBtn>\n    </QuestionFaqWrapper>\n  </section>\n);\n\nconst QuestionFaqWithFetchedData = withFetchedData<Questions, Props>(\n  QuestionFaq,\n  `${process.env.PUBLIC_URL}/json/questions.json`\n);\n\nexport { QuestionFaqWithFetchedData };\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { ComponentType, useState, useMemo, useEffect } from 'react';\nimport { LoadingPlaceholder, ErrorPlaceholder } from './unsuccessfulFetchPlaceholders';\n\ntype Loading = { status: 'loading'; result: null };\ntype Failure = { status: 'failure'; result: Error };\ntype Success<T> = { status: 'success'; result: T };\n\ntype Data<T> = Loading | Failure | Success<T>;\n\nexport interface WithFetchedDataProps<T> {\n  data?: T;\n  setData?: (data: T) => void;\n}\n\nfunction withFetchedData<D, P extends WithFetchedDataProps<D>>(\n  Component: ComponentType<P>,\n  url: string,\n  options?: RequestInit\n): React.FC<P> {\n  return (props: P) => {\n    const [state, setState] = useState<Data<D>>({ status: 'loading', result: null });\n    const { signal, abort } = useMemo(() => new AbortController(), []);\n\n    useEffect(() => {\n      fetch(url, { ...options, signal })\n        .then((res) => {\n          if (res.ok) return res.json();\n          throw new Error(res.statusText);\n        })\n        .then((data: D) => setState({ status: 'success', result: data }))\n        .catch((error: Error) => setState({ status: 'failure', result: error }));\n\n      return abort;\n    }, [signal, abort]);\n\n    if (state.status === 'loading') return <LoadingPlaceholder />;\n\n    if (state.status === 'failure') return <ErrorPlaceholder text={state.result.message} />;\n\n    return (\n      <Component\n        data={state.result}\n        setData={(data: D) => setState({ status: 'success', result: data })}\n        {...props}\n      />\n    );\n  };\n}\n\nexport { withFetchedData };\n","import React, { useCallback } from 'react';\nimport styled from 'styled-components';\n\nimport { StyledWrapper } from '../../StyledWrapper';\nimport { StyledStandardSectionTitle } from '../../StyledStandardSectionTitle';\nimport { StyledStandardForm } from '../../StyledStandardForm';\n\nconst SubmitYourQuestionWrapper = styled(StyledWrapper)`\n  padding-top: 85px;\n  padding-bottom: 110px;\n\n  @media (max-width: 800px) {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n`;\n\nconst SubmitYourQuestion: React.FC = () => {\n  const handleSubmit = useCallback((event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    // TODO: Replace with a modal\n    // eslint-disable-next-line no-alert\n    alert('Understood, accepted, processed');\n  }, []);\n\n  return (\n    <section>\n      <SubmitYourQuestionWrapper>\n        <StyledStandardSectionTitle rowOne=\"Submit your\" rowTwo=\"Question\" />\n        <StyledStandardForm\n          name=\"submit-your-question\"\n          action=\"\"\n          method=\"post\"\n          handleSubmit={handleSubmit}\n        />\n      </SubmitYourQuestionWrapper>\n    </section>\n  );\n};\n\nexport { SubmitYourQuestion };\n","import React from 'react';\n\nimport { MainContentSectionPromo } from '../MainContentSectionPromo/MainContentSectionPromo';\nimport { QuestionFaqWithFetchedData } from './QuestionFaq';\nimport { SubmitYourQuestion } from './SubmitYourQuestion';\n\nconst FAQ: React.FC = () => (\n  <section>\n    <MainContentSectionPromo\n      sectionName=\"faq\"\n      titleRowOne=\"FAQ\"\n      titleRowTwo=\"Questions\"\n      bgPosition=\"center 80%\"\n    />\n    <QuestionFaqWithFetchedData />\n    <SubmitYourQuestion />\n  </section>\n);\n\nexport default FAQ;\n"],"sourceRoot":""}